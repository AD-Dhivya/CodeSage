# Complete Docker MCP Implementation
services:
  # Main application
  codesage-app:
    build: .
    container_name: codesage-app
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - redis
      - java-analyzer
      - python-analyzer
      - js-analyzer
    networks:
      - codesage-network
  
  # Caching layer
  redis:
    image: redis:7-alpine
    container_name: codesage-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - codesage-network
  
  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: codesage-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - codesage-app
    networks:
      - codesage-network
  
  # Docker MCP: Language-specific analyzers
  java-analyzer:
    image: openjdk:21-jdk-slim
    container_name: java-analyzer
    command: ["tail", "-f", "/dev/null"]  # Keep running
    volumes:
      - ./analysis-tools:/tools
    networks:
      - codesage-network
  
  python-analyzer:
    image: python:3.11-slim
    container_name: python-analyzer
    command: ["tail", "-f", "/dev/null"]  # Keep running
    volumes:
      - ./analysis-tools:/tools
    networks:
      - codesage-network
  
  js-analyzer:
    image: node:18-slim
    container_name: js-analyzer
    command: ["tail", "-f", "/dev/null"]  # Keep running
    volumes:
      - ./analysis-tools:/tools
    networks:
      - codesage-network
  
  # Docker MCP: Security scanners
  security-scanner:
    image: owasp/zap2docker-stable
    container_name: security-scanner
    command: ["tail", "-f", "/dev/null"]  # Keep running
    networks:
      - codesage-network
  
  # Docker MCP: Dependency checker
  dependency-checker:
    image: owasp/dependency-check
    container_name: dependency-checker
    command: ["tail", "-f", "/dev/null"]  # Keep running
    volumes:
      - ./dependencies:/src
    networks:
      - codesage-network

networks:
  codesage-network:
    driver: bridge
